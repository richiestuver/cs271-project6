Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 19:17:52
 Project6     (Proj6_stuverr.asm			     Page 1 - 1


				TITLE Project6     (Proj6_stuverr.asm)

				; Author: Richie Stuver
				; Last Modified: 03-14-21
				; OSU email address: stuverr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 03-14-21
				; Description: Write macros and low level procedures to read string input from user, 
				;               convert to numeric data, and perform operations on that data.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Description: Calls Irvine proc to read a string from keyboard and stores at a 
				;   given memory location.
				;
				; Preconditions:
				;
				; Receives:     prompt_addr = address for user prompt string
				;               write_addr = address to write the user string
				;               buffer_val = length of string buffer for user string
				;               bytes_read_addr = address to write the number of bytes of user string
				; 
				; Returns:      user string contents written to memory at write_addr
				;               length of user string written to bytes_read_addr
				;
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt_addr:REQ, write_addr:REQ, buffer_val:REQ, bytes_read_addr:REQ
				    
				    PUSH    EAX
				    PUSH    EBX
				    PUSH    ECX
				    PUSH    EDX

				    MOV     EDX, prompt_addr
				    CALL    WriteString

				    MOV     EDX, write_addr
				    MOV     ECX, buffer_val
				    CALL    ReadString ; address of user string now in EDX, lenght in EAX
				    
				    MOV     EBX, bytes_read_addr
				    MOV     [EBX], EAX

				    POP     EDX
				    POP     ECX
				    POP     EBX
				    POP     EAX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Description: Calls Irvine proc to write a string from memory
				;
				; Preconditions:
				;
				; Receives:     string_addr = address for string to write
				; 
				; Returns:      string contained at string_addr written to console
				;
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO string_addr

				    PUSH    EDX

				    MOV     EDX, offset string_addr
				    CALL    WriteString

				    POP     EDX

				ENDM

				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)
 00000000 50 72 6F 6A 65	    intro               BYTE    "Project 6: The final project - by Richie Stuver", 13,10,13,10,
	   63 74 20 36 3A
	   20 54 68 65 20
	   66 69 6E 61 6C
	   20 70 72 6F 6A
	   65 63 74 20 2D
	   20 62 79 20 52
	   69 63 68 69 65
	   20 53 74 75 76
	   65 72 0D 0A 0D
	   0A 45 6E 74 65
	   72 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 74 6F 20 61
	   20 33 32 62 69
	   74 20 72 65 67
	   69 73 74 65 72
	   2E 54 68 65 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   6C 69 73 74 20
	   61 73 20 77 65
	   6C 6C 20 61 73
	   20 74 68 65 20
	   73 75 6D 20 61
	   6E 64 20 72 6F
	   75 6E 64 65 64
	   20 61 76 65 72
	   61 67 65 2E 0D
	   0A 0D 0A 00
				                                "Enter 10 signed decimal integers small enough to fit into a 32bit register.",
				                                "The program will display the list as well as the sum and rounded average.",13,10,13,10,0
				    
 000000CC 50 6C 65 61 73	    prompt              BYTE    "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00

 000000EB 45 52 52 4F 52	    error               BYTE    "ERROR: Invalid input. Too large or not a signed integer.",0
	   3A 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 20 54 6F 6F
	   20 6C 61 72 67
	   65 20 6F 72 20
	   6E 6F 74 20 61
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   2E 00

 00000124  0000000A [		    userInts            DWORD   10 DUP(?)
	    00000000
	   ]

 0000014C  00000021 [		    userString          BYTE    33 DUP(0) ; large enough for user to enter up to 32 chars
	    00
	   ]
 0000016D 00000000		    lenUserString       DWORD   ? ; 32 bit signed integer is 10 digits long

 00000171  0000000C [		    tempString          BYTE    12 DUP(0)
	    00
	   ]

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)

				    ;------------------------------
				    ; Introduction and instructions to the user
				    ;------------------------------
				    mDisplayString offset intro
 00000000  52		     1	    PUSH    EDX
 00000001  BA 00000000 R     1	    MOV     EDX, offset offset intro
 00000006  E8 00000000 E     1	    CALL    WriteString
 0000000B  5A		     1	    POP     EDX

				    ;------------------------------
				    ; Collect the user's inputs and validate.
				    ;------------------------------
 0000000C  B9 0000000A		    MOV     ECX, LENGTHOF userInts
 00000011  BE 00000124 R	    MOV     ESI, offset userInts
 00000016  BB 00000004		    MOV     EBX, TYPE userInts
 0000001B			_get_ints:

 0000001B  56			    PUSH    ESI                     ; [EBP + 24]
 0000001C  68 000000CC R	    PUSH    offset prompt           ; [EBP + 20]
 00000021  68 0000014C R	    push    offset userString       ; [EBP + 16]
 00000026  6A 21		    push    SIZEOF userString       ; [EBP + 12]
 00000028  68 0000016D R	    push    offset lenUserString    ; [EBP + 8]
 0000002D  E8 00000022		    CALL    ReadVal
 00000032  E8 00000000 E	    CALL    CrLf

 00000037  8B 06		    MOV     EAX, [ESI]
 00000039  68 00000171 R	    PUSH    offset tempString       ; [EBP + 12]  
 0000003E  50			    PUSH    EAX                     ; [EBP + 8]
 0000003F  E8 000000AF		    CALL    writeVal
 00000044  E8 00000000 E	    CALL    CrLf


 00000049  03 F3		    ADD     ESI, EBX
 0000004B  E2 CE		    LOOP    _get_ints

				    ;MOV     EDX, offset userInts
				    ;CALL    WriteString

				    ;mDisplayString offset userString

				    Invoke ExitProcess,0	; exit to operating system
 0000004D  6A 00	   *	    push   +000000000h
 0000004F  E8 00000000 E   *	    call   ExitProcess
 00000054			main ENDP

				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Description: Gets user input as a string of ascii digits. Converts digits to 
				;               numeric SDWORD. Validates the input. Writes the SDWORD to memory.
				;
				; Preconditions: pass in 5x 4byte data types == 20 bytes
				;
				; Postconditions: all registers saved and restored. 
				;
				; Recieves: 1) addr to store user DWORD         [EBP + 24]
				;           2) addr of prompt string            [EBP + 20]
				;           3) addr to store user string        [EBP + 16]
				;           4) size of user string              [EBP + 12]
				;           5) addr to store bytes read         [EBP + 8]
				;
				; Returns: user's input saved as dword in memory
				;
				; ---------------------------------------------------------------------------------
 00000054			ReadVal PROC

				    ;------------------------------
				    ; Setup the call stack and preserve any 
				    ; registers used.
				    ;------------------------------
 00000054  55			    PUSH    EBP
 00000055  8B EC		    MOV     EBP, ESP

 00000057  50			    PUSH    EAX
 00000058  53			    PUSH    EBX
 00000059  51			    PUSH    ECX
 0000005A  56			    PUSH    ESI
 0000005B  57			    PUSH    EDI

 0000005C			_start:
				    ;------------------
				    ; Do stuff
				    ;------------------
				    mGetString [EBP + 20], [EBP + 16], [EBP + 12], [EBP + 8]
 0000005C  50		     1	    PUSH    EAX
 0000005D  53		     1	    PUSH    EBX
 0000005E  51		     1	    PUSH    ECX
 0000005F  52		     1	    PUSH    EDX
 00000060  8B 55 14	     1	    MOV     EDX, [EBP + 20]
 00000063  E8 00000000 E     1	    CALL    WriteString
 00000068  8B 55 10	     1	    MOV     EDX, [EBP + 16]
 0000006B  8B 4D 0C	     1	    MOV     ECX, [EBP + 12]
 0000006E  E8 00000000 E     1	    CALL    ReadString ; address of user string now in EDX, lenght in EAX
 00000073  8B 5D 08	     1	    MOV     EBX, [EBP + 8]
 00000076  89 03	     1	    MOV     [EBX], EAX
 00000078  5A		     1	    POP     EDX
 00000079  59		     1	    POP     ECX
 0000007A  5B		     1	    POP     EBX
 0000007B  58		     1	    POP     EAX

				    ;------------------
				    ; Setup registers with the values needed to perform the string 
				    ; traversal.
				    ;------------------
				    
 0000007C  8B 5D 08		    MOV     EBX, [EBP + 8]  ; addr of length of user input
 0000007F  8B 75 10		    MOV     ESI, [EBP + 16] ; address of user input
 00000082  8B 0B		    MOV     ECX, [EBX]      ; value of length of user input
				    
 00000084  FC			    CLD
 00000085  BB 00000000		    MOV     EBX, +0 ; store running total for the integer value

 0000008A  AC			    LODSB
				    ;------------------------------
				    ; If the first char is a sign, check if it's negative.
				    ; if the sign is positive, skip to the next char in the array.
				    ;------------------------------
 0000008B			_check_pos:
 0000008B  3C 2B		    CMP     AL, '+'
 0000008D  75 03		    JNE     _check_neg
 0000008F  49			    DEC     ECX
 00000090  EB 07		    JMP     _loop

 00000092			_check_neg:
 00000092  3C 2D		    CMP     AL, '-'
 00000094  75 04		    JNE     _check_low
 00000096  49			    DEC     ECX
 00000097  EB 00		    JMP     _loop

 00000099			_loop:
 00000099  AC			    LODSB
				    ;------------------------------
				    ; DO A COMPARISON HERE FOR ILLEGAL CHARS. if char is not in [48, 57]
				    ; then it is not a valid integer
				    ;------------------------------
 0000009A			_check_low:
 0000009A  3C 30		    CMP     AL, '0'
 0000009C  7C 38		    JL      _error
 0000009E  EB 00		    JMP     _check_high

 000000A0			_check_high:
 000000A0  3C 39		    CMP     AL, '9'
 000000A2  7F 32		    JG      _error

				    ;------------------------------
				    ; load the char into the accumulator, convert it to
				    ; it's numeric value, and add it to the running total.
				    ; after this loop exits, the final int value is in EBX
				    ;------------------------------
 000000A4			_calculateTotal:
 000000A4  2C 30		    SUB     AL, '0' ; start of ascii integers
 000000A6  50			    PUSH    EAX
 000000A7  B8 0000000A		    MOV     EAX, +10
 000000AC  F7 EB		    IMUL    EBX
 000000AE  71 03		    JNO     _proceed
 000000B0  58			    POP     EAX
 000000B1  EB 23		    JMP     _error
 000000B3			_proceed:
 000000B3  8B D8		    MOV     EBX, EAX
 000000B5  58			    POP     EAX

 000000B6  0F B6 C0		    MOVZX   EAX, AL
 000000B9  03 D8		    ADD     EBX, EAX
				    ;------------------------------
				    ; Check for overflow. A postive number larger than 2,147,483,647 will not fit.
				    ;------------------------------
 000000BB  70 19		    JO      _error

 000000BD  E2 DA		    LOOP    _loop

 000000BF  FC			    CLD ; DONT FORGET TO CLEAR THE DIRECTION FLAG
				    

				    ;------------------------------
				    ; if the sign is negative, negate. 
				    ;------------------------------
 000000C0  53			    PUSH    EBX
 000000C1  8B 5D 08		    MOV     EBX, [EBP + 8]  ; addr of length of user input
 000000C4  8B 75 10		    MOV     ESI, [EBP + 16]
 000000C7  AC			    LODSB   
 000000C8  5B			    POP     EBX

 000000C9  3C 2D		    CMP     AL, '-'
 000000CB  75 02		    JNE     _continue
 000000CD  F7 DB		    NEG     EBX
				    
 000000CF			_continue:
				    ;------------------------------
				    ; Store the integer in the given output memory address
				    ;------------------------------

 000000CF  8B 7D 18		    MOV     EDI, [EBP + 24]
 000000D2  89 1F		    MOV     [EDI], EBX

 000000D4  EB 14		    JMP     _tearDown

 000000D6			_error:
 000000D6  BA 000000EB R	    MOV     edx, offset error
 000000DB  E8 00000000 E	    CALL    WriteString
 000000E0  E8 00000000 E	    CALL    CrLf
 000000E5  E9 FFFFFF72		    JMP     _start

				    ;------------------------------
				    ; Tear down the call stack and restore registers
				    ;------------------------------
 000000EA			_tearDown:
 000000EA  5F			    POP     EDI
 000000EB  5E			    POP     ESI
 000000EC  59			    POP     ECX
 000000ED  5B			    POP     EBX
 000000EE  58			    POP     EAX

 000000EF  5D			    POP     EBP
 000000F0  C2 0014		    RET 20

 000000F3			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: writeVal
				;
				; Description: Takes in an SDWORD and converts it into an ascii representation
				;
				; Preconditions: pass in SDWORD by value and offset to store byte array
				;
				; Postconditions: all registers saved and restored
				;
				; Recieves: 
				;           memory address to store string in while working [EBP + 12]
				;           SDWORD (4) [EBP + 8]
				;
				; Returns: sdword converted to ascii and written to output
				;
				; ---------------------------------------------------------------------------------
 000000F3			WriteVal PROC
				    ;------------------------------
				    ; Setup the call stack and preserve any 
				    ; registers used.
				    ;------------------------------

 000000F3  55			    PUSH    EBP
 000000F4  8B EC		    MOV     EBP, ESP

 000000F6  60			    PUSHAD
				    
 000000F7  8B 7D 0C		    MOV     EDI, [EBP + 12] ; write string here
 000000FA  8B 45 08		    MOV     EAX, [EBP + 8] ; signed dword
 000000FD			_convert_to_string:

 000000FD  33 D2		    XOR     EDX, EDX
 000000FF  BB 0000000A		    MOV     EBX, 10
 00000104  F7 F3		    DIV     EBX              ; remainder in EDX
				    
 00000106  83 C2 30		    ADD     EDX, 48 ; make it an ascii char
 00000109  88 17		    MOV     [EDI], DL
 0000010B  47			    INC     EDI

 0000010C  83 F8 00		    CMP     EAX, 0
 0000010F  75 EC		    JNE     _convert_to_string
				        
 00000111  E8 00000000 E	    CALL    WriteInt

				    ;------------------------------
				    ; Tear down the call stack and restore registers
				    ;------------------------------

 00000116  61			    POPAD

 00000117  5D			    POP     EBP
 00000118  C2 0008		    RET     8

 0000011B			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 19:17:52
 Project6     (Proj6_stuverr.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000017D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000011B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 0000009F Public STDCALL
  _start . . . . . . . . . . . .	L Near	 0000005C _TEXT	
  _check_pos . . . . . . . . . .	L Near	 0000008B _TEXT	
  _check_neg . . . . . . . . . .	L Near	 00000092 _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000099 _TEXT	
  _check_low . . . . . . . . . .	L Near	 0000009A _TEXT	
  _check_high  . . . . . . . . .	L Near	 000000A0 _TEXT	
  _calculateTotal  . . . . . . .	L Near	 000000A4 _TEXT	
  _proceed . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000000CF _TEXT	
  _error . . . . . . . . . . . .	L Near	 000000D6 _TEXT	
  _tearDown  . . . . . . . . . .	L Near	 000000EA _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000028 Public STDCALL
  _convert_to_string . . . . . .	L Near	 000000FD _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000054 Public STDCALL
  _get_ints  . . . . . . . . . .	L Near	 0000001B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 000000EB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lenUserString  . . . . . . . . .	DWord	 0000016D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt . . . . . . . . . . . . .	Byte	 000000CC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempString . . . . . . . . . . .	Byte	 00000171 _DATA	
userInts . . . . . . . . . . . .	DWord	 00000124 _DATA	
userString . . . . . . . . . . .	Byte	 0000014C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
